namespace RTUAutomation.Repository.PasRepositories;

public sealed class PasRepository(DatabaseHelper databaseHelper) : IPasRepository
{
    public async Task<IEnumerable<PasLocationsModel>> GetAllLocationsAsync()
    {
        const string query = "SELECT a.RTUName, a.ProtocolName, b.StnName FROM Monarch.dbo.vRTU_Protocol a LEFT JOIN Monarch.dbo.RTU_Station b ON (b.pRTU = a.record) ORDER BY RTUName";
        return await databaseHelper.QueryAsync<PasLocationsModel>(query);
    }

    public async Task<IEnumerable<PasAnalogTableModel>> GetAnalogTableAsync(string rtuLocation)
    {
        const string query = """
                             SELECT asd.PointAddress scan_order, sa.Name, oa.LongDescription AS Description, asd.DestinationKey [Key], sa.curve_description, asd.protocol_name
                             FROM(SELECT *
                                  FROM(SELECT 'EDAN' AS DAN, ed.record rtu_record, ed.Name AS rtu_name, esd.prtu, ed.Protocol AS protocol, ept.Name AS protocol_name, esd.record scan_data_record, esd.GroupNumber, esd.GroupAddress, esd.PointAddress, esd.DestinationKey, esd.[Key] AS guid_key, CASE WHEN esd.protocoltype=1 AND ept.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN esd.protocoltype=2 AND ept.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type
                                       FROM Monarch_EDAN.FEP.vSCAN_DATA esd, Monarch_EDAN.FEP.vRTU_DATA ed, Monarch_EDAN.FEP.vPROTOCOL_TYPE ept
                                       WHERE ed.record=esd.prtu AND ed.Name IS NOT NULL AND ed.protocol=ept.record
                                       UNION ALL
                                       SELECT 'WDAN' AS DAN, wd.record rtu_record, wd.Name AS rtu_name, wsd.prtu, wd.Protocol AS protocol, wpt.Name AS protocol_name, wsd.record scan_data_record, wsd.GroupNumber, wsd.GroupAddress, wsd.PointAddress, wsd.DestinationKey, wsd.[Key] AS guid_key, CASE WHEN wsd.protocoltype=1 AND wpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN wsd.protocoltype=2 AND wpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type
                                       FROM Monarch_WDAN.FEP.vSCAN_DATA wsd, Monarch_WDAN.FEP.vRTU_DATA wd, Monarch_WDAN.FEP.vPROTOCOL_TYPE wpt
                                       WHERE wd.record=wsd.prtu AND wd.Name IS NOT NULL AND wd.protocol=wpt.record
                                       UNION ALL
                                       SELECT 'LDAN' AS DAN, ld.record rtu_record, ld.Name AS rtu_name, lsd.prtu, ld.Protocol AS protocol, lpt.Name AS protocol_name, lsd.record scan_data_record, lsd.GroupNumber, lsd.GroupAddress, lsd.PointAddress, lsd.DestinationKey, lsd.[Key] AS guid_key, CASE WHEN lsd.protocoltype=1 AND lpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN lsd.protocoltype=2 AND lpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type
                                       FROM Monarch_LDAN.FEP.vSCAN_DATA lsd, Monarch_LDAN.FEP.vRTU_DATA ld, Monarch_LDAN.FEP.vPROTOCOL_TYPE lpt
                                       WHERE ld.record=lsd.prtu AND ld.Name IS NOT NULL AND ld.protocol=lpt.record
                                       UNION ALL
                                       SELECT 'TDAN' AS DAN, td.record rtu_record, td.Name AS rtu_name, tsd.prtu, td.Protocol AS protocol, tpt.Name AS protocol_name, tsd.record scan_data_record, tsd.GroupNumber, tsd.GroupAddress, tsd.PointAddress, tsd.DestinationKey, tsd.[Key] AS guid_key, CASE WHEN tsd.protocoltype=1 AND tpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN tsd.protocoltype=2 AND tpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type
                                       FROM Monarch_TDAN.FEP.vSCAN_DATA tsd, Monarch_TDAN.FEP.vRTU_DATA td, Monarch_TDAN.FEP.vPROTOCOL_TYPE tpt
                                       WHERE td.record=tsd.prtu AND td.Name IS NOT NULL AND td.protocol=tpt.record) sd
                                  WHERE sd.point_type='ANALOG' AND sd.rtu_name=@RTU) asd
                                 LEFT JOIN(SELECT sa.[Key], sa.Name, ssc.record curve_record, ssc.Name curve_description
                                           FROM Monarch.SCADA.ANALOG sa, Monarch.SCADA.SCALE ssc
                                           WHERE sa.pScale=ssc.record) sa ON asd.DestinationKey=sa.[Key]
                                 LEFT JOIN Monarch.ONCOR.ONC_ANALOG oa ON asd.DestinationKey=oa.SCADAKey
                             ORDER BY asd.rtu_name, CAST(asd.PointAddress AS INT);
                             """;
        return await databaseHelper.QueryAsync<PasAnalogTableModel>(query, new { RTU = rtuLocation });
    }

    public async Task<IEnumerable<PasDigitalTableModel>> GetDigitalTableAsync(string rtuLocation)
    {
        const string query = """
                             SELECT ssd.PointAddress scan_order, ss.Name, os.LongDescription Description, ssd.DestinationKey [Key], ssd.inverted, ssd.protocol_name, st.StatesTable, st.Normal_State
                             FROM(SELECT *
                                  FROM(SELECT 'EDAN' AS DAN, ed.record rtu_record, ed.Name AS rtu_name, esd.prtu, ed.Protocol AS protocol, ept.Name AS protocol_name, esd.record scan_data_record, esd.GroupNumber, esd.GroupAddress, esd.PointAddress, esd.DestinationKey, esd.[Key] AS guid_key, CASE WHEN esd.protocoltype=1 AND ept.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN esd.protocoltype=2 AND ept.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type, CASE WHEN ss.statecalc IS NOT NULL THEN CASE WHEN ss.statecalc=1 THEN 'Y' ELSE 'N' END ELSE NULL END AS inverted
                                       FROM Monarch_EDAN.FEP.vSCAN_DATA esd
                                            LEFT JOIN Monarch_EDAN.SCADA.STATUS ss ON esd.DestinationKey=ss.[Key], Monarch_EDAN.FEP.vRTU_DATA ed, Monarch_EDAN.FEP.vPROTOCOL_TYPE ept
                                       WHERE ed.record=esd.prtu AND ed.Name IS NOT NULL AND ed.protocol=ept.record
                                       UNION ALL
                                       SELECT 'WDAN' AS DAN, wd.record rtu_record, wd.Name AS rtu_name, wsd.prtu, wd.Protocol AS protocol, wpt.Name AS protocol_name, wsd.record scan_data_record, wsd.GroupNumber, wsd.GroupAddress, wsd.PointAddress, wsd.DestinationKey, wsd.[Key] AS guid_key, CASE WHEN wsd.protocoltype=1 AND wpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN wsd.protocoltype=2 AND wpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type, CASE WHEN ss.statecalc IS NOT NULL THEN CASE WHEN ss.statecalc=1 THEN 'Y' ELSE 'N' END ELSE NULL END AS inverted
                                       FROM Monarch_WDAN.FEP.vSCAN_DATA wsd
                                            LEFT JOIN Monarch_WDAN.SCADA.STATUS ss ON wsd.DestinationKey=ss.[Key], Monarch_WDAN.FEP.vRTU_DATA wd, Monarch_WDAN.FEP.vPROTOCOL_TYPE wpt
                                       WHERE wd.record=wsd.prtu AND wd.Name IS NOT NULL AND wd.protocol=wpt.record
                                       UNION ALL
                                       SELECT 'LDAN' AS DAN, ld.record rtu_record, ld.Name AS rtu_name, lsd.prtu, ld.Protocol AS protocol, lpt.Name AS protocol_name, lsd.record scan_data_record, lsd.GroupNumber, lsd.GroupAddress, lsd.PointAddress, lsd.DestinationKey, lsd.[Key] AS guid_key, CASE WHEN lsd.protocoltype=1 AND lpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN lsd.protocoltype=2 AND lpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type, CASE WHEN ss.statecalc IS NOT NULL THEN CASE WHEN ss.statecalc=1 THEN 'Y' ELSE 'N' END ELSE NULL END AS inverted
                                       FROM Monarch_LDAN.FEP.vSCAN_DATA lsd
                                            LEFT JOIN Monarch_LDAN.SCADA.STATUS ss ON lsd.DestinationKey=ss.[Key], Monarch_LDAN.FEP.vRTU_DATA ld, Monarch_LDAN.FEP.vPROTOCOL_TYPE lpt
                                       WHERE ld.record=lsd.prtu AND ld.Name IS NOT NULL AND ld.protocol=lpt.record
                                       UNION ALL
                                       SELECT 'TDAN' AS DAN, td.record rtu_record, td.Name AS rtu_name, tsd.prtu, td.Protocol AS protocol, tpt.Name AS protocol_name, tsd.record scan_data_record, tsd.GroupNumber, tsd.GroupAddress, tsd.PointAddress, tsd.DestinationKey, tsd.[Key] AS guid_key, CASE WHEN tsd.protocoltype=1 AND tpt.Name IN ('DNP', 'SERIES5', 'REDAC') THEN 'STATUS'
                                                                                                                                                                                                                                                                                                   WHEN tsd.protocoltype=2 AND tpt.Name='VANCOMM' THEN 'STATUS' ELSE 'ANALOG' END AS point_type, CASE WHEN ss.statecalc IS NOT NULL THEN CASE WHEN ss.statecalc=1 THEN 'Y' ELSE 'N' END ELSE NULL END AS inverted
                                       FROM Monarch_TDAN.FEP.vSCAN_DATA tsd
                                            LEFT JOIN Monarch_TDAN.SCADA.STATUS ss ON tsd.DestinationKey=ss.[Key], Monarch_TDAN.FEP.vRTU_DATA td, Monarch_TDAN.FEP.vPROTOCOL_TYPE tpt
                                       WHERE td.record=tsd.prtu AND td.Name IS NOT NULL AND td.protocol=tpt.record) sd
                                  WHERE sd.point_type='STATUS' AND sd.rtu_name=@RTU) ssd
                                 LEFT JOIN Monarch.SCADA.STATUS ss ON ssd.DestinationKey=ss.[Key]
                                 LEFT JOIN Monarch.ONCOR.ONC_STATUS os ON ssd.DestinationKey=os.SCADAKey
                                 LEFT JOIN(SELECT ss.*, ISNULL(sts.Names_0, '')+CASE WHEN ISNULL(sts.Names_1, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_1, '')+CASE WHEN ISNULL(sts.Names_2, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_2, '')+CASE WHEN ISNULL(sts.Names_3, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_3, '')+CASE WHEN ISNULL(sts.Names_4, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_4, '')+CASE WHEN ISNULL(sts.Names_5, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_5, '')+CASE WHEN ISNULL(sts.Names_6, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_6, '')+CASE WHEN ISNULL(sts.Names_7, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_7, '')+CASE WHEN ISNULL(sts.Names_8, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_8, '')+CASE WHEN ISNULL(sts.Names_9, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_9, '')+CASE WHEN ISNULL(sts.Names_10, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_10, '')+CASE WHEN ISNULL(sts.Names_11, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_11, '')+CASE WHEN ISNULL(sts.Names_12, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_12, '')+CASE WHEN ISNULL(sts.Names_13, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_13, '')+CASE WHEN ISNULL(sts.Names_14, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_14, '')+CASE WHEN ISNULL(sts.Names_15, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_15, '')+CASE WHEN ISNULL(sts.Names_16, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_16, '')+CASE WHEN ISNULL(sts.Names_17, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_17, '')+CASE WHEN ISNULL(sts.Names_18, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_18, '')+CASE WHEN ISNULL(sts.Names_19, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_19, '')+CASE WHEN ISNULL(sts.Names_20, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_20, '')+CASE WHEN ISNULL(sts.Names_21, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_21, '')+CASE WHEN ISNULL(sts.Names_22, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_22, '')+CASE WHEN ISNULL(sts.Names_23, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_23, '')+CASE WHEN ISNULL(sts.Names_24, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_24, '')+CASE WHEN ISNULL(sts.Names_25, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_25, '')+CASE WHEN ISNULL(sts.Names_26, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_26, '')+CASE WHEN ISNULL(sts.Names_27, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_27, '')+CASE WHEN ISNULL(sts.Names_28, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_28, '')+CASE WHEN ISNULL(sts.Names_29, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_29, '')+CASE WHEN ISNULL(sts.Names_30, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_30, '')+CASE WHEN ISNULL(sts.Names_31, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_31, '')+CASE WHEN ISNULL(sts.Names_32, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_32, '')+CASE WHEN ISNULL(sts.Names_33, '')!='' THEN '/' ELSE '' END+ISNULL(sts.Names_33, '') AS StatesTable, CASE WHEN ConfigNormalState=0 THEN sts.Names_0
onfigNormalState=1 THEN sts.Names_1 ELSE 'NO NORMAL STATE' END AS Normal_State
                                           FROM Monarch.SCADA.STATUS ss, Monarch.STATES.STATE sts
                                           WHERE ss.pStates=sts.record) st ON(st.[Key]=ssd.DestinationKey)
                             ORDER BY ssd.rtu_name, CAST(ssd.PointAddress AS INT);
                             """;
        return await databaseHelper.QueryAsync<PasDigitalTableModel>(query, new { RTU = rtuLocation });
    }

    public async Task<IEnumerable<PasControlTableModel>> GetControlTableAsync(string rtuLocation)
    {
        const string query = """
                             SELECT DISTINCT rc.control_address_from_1, rc.Name, rc.Description, rc.[Key], rc.setpoint_curve, rc.control_type
                             FROM(SELECT rc.rtu_name, CASE WHEN rc.protocol_name='DNP' THEN rc.point_address
                                                      WHEN rc.protocol_name='VANCOMM' AND rc.control_type='OPEN ONLY' THEN (((rc.group_address-1)* 16)+rc.point_address)/ 2
                                                      WHEN rc.protocol_name='VANCOMM' AND rc.control_type='CLOSE ONLY' THEN (((rc.group_address-1)* 16)+rc.point_address+1)/ 2
                                                      WHEN rc.protocol_name='REDAC' THEN ((rc.group_address * 12)+rc.point_address)
                                                      WHEN rc.protocol_name='SERIES5' AND rc.control_type='CLOSE ONLY' THEN (rc.point_address+1)/ 2
                                                      WHEN rc.protocol_name='SERIES5' AND rc.control_type='OPEN ONLY' THEN (rc.point_address / 2)ELSE NULL END AS control_address_from_1, rc.Name, rc.Description, rc.sourcekey [Key], rc.setpoint_curve, CASE WHEN rc.control_type='SETPOINT' THEN rc.control_type ELSE 'OPEN-CLOSE' END AS control_type
                                  FROM(SELECT rc.rtu_name, rc.protocol_name, rc.group_address, rc.point_address, sc.Name, sc.Description, rc.sourcekey, sc.setpoint_curve, rc.control_type, rc.DNP_control_action
                                       FROM(SELECT 'EDAN' AS DAN, rd.record rtu_record, rd.Name AS rtu_name, rc.prtu, rd.Protocol, pt.Name AS protocol_name, rc.record rtu_control_record, rc.group_number, rc.group_address, rc.point_address, rc.sourcekey, rc.guidasstring AS guid_key, CASE WHEN rc.control_type=1 THEN 'RAISE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=2 THEN 'LOWER ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=4 THEN 'OPEN ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=5 THEN 'CLOSE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=6 THEN 'OPEN-CLOSE'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=7 THEN 'SETPOINT' ELSE NULL END AS control_type, CASE WHEN rd.protocol=8 AND rc.dnp_control_code=129 THEN 'TRIP PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=65 THEN 'CLOSE PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=1 THEN 'PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol !=8 THEN 'N/A' ELSE NULL END AS DNP_control_action
                                            FROM Monarch_EDAN.FEP.vRTU_CONTROL rc, Monarch_EDAN.FEP.vRTU_DATA rd, Monarch_EDAN.FEP.vPROTOCOL_TYPE pt
                                            WHERE rd.record=rc.prtu AND rd.indic=1 AND rd.protocol=pt.record
                                            UNION ALL
                                            SELECT 'WDAN' AS DAN, rd.record rtu_record, rd.Name AS rtu_name, rc.prtu, rd.Protocol, pt.Name AS protocol_name, rc.record rtu_control_record, rc.group_number, rc.group_address, rc.point_address, rc.sourcekey, rc.guidasstring AS guid_key, CASE WHEN rc.control_type=1 THEN 'RAISE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=2 THEN 'LOWER ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=4 THEN 'OPEN ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=5 THEN 'CLOSE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=6 THEN 'OPEN-CLOSE'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=7 THEN 'SETPOINT' ELSE NULL END AS control_type, CASE WHEN rd.protocol=8 AND rc.dnp_control_code=129 THEN 'TRIP PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=65 THEN 'CLOSE PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=1 THEN 'PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol !=8 THEN 'N/A' ELSE NULL END AS DNP_control_action
                                            FROM Monarch_WDAN.FEP.vRTU_CONTROL rc, Monarch_WDAN.FEP.vRTU_DATA rd, Monarch_WDAN.FEP.vPROTOCOL_TYPE pt
                                            WHERE rd.record=rc.prtu AND rd.indic=1 AND rd.protocol=pt.record
                                            UNION ALL
                                            SELECT 'LDAN' AS DAN, rd.record rtu_record, rd.Name AS rtu_name, rc.prtu, rd.Protocol, pt.Name AS protocol_name, rc.record rtu_control_record, rc.group_number, rc.group_address, rc.point_address, rc.sourcekey, rc.guidasstring AS guid_key, CASE WHEN rc.control_type=1 THEN 'RAISE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=2 THEN 'LOWER ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=4 THEN 'OPEN ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=5 THEN 'CLOSE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=6 THEN 'OPEN-CLOSE'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=7 THEN 'SETPOINT' ELSE NULL END AS control_type, CASE WHEN rd.protocol=8 AND rc.dnp_control_code=129 THEN 'TRIP PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=65 THEN 'CLOSE PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=1 THEN 'PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol !=8 THEN 'N/A' ELSE NULL END AS DNP_control_action
                                            FROM Monarch_LDAN.FEP.vRTU_CONTROL rc, Monarch_LDAN.FEP.vRTU_DATA rd, Monarch_LDAN.FEP.vPROTOCOL_TYPE pt
                                            WHERE rd.record=rc.prtu AND rd.indic=1 AND rd.protocol=pt.record
                                            UNION ALL
                                            SELECT 'TDAN' AS DAN, rd.record rtu_record, rd.Name AS rtu_name, rc.prtu, rd.Protocol, pt.Name AS protocol_name, rc.record rtu_control_record, rc.group_number, rc.group_address, rc.point_address, rc.sourcekey, rc.guidasstring AS guid_key, CASE WHEN rc.control_type=1 THEN 'RAISE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=2 THEN 'LOWER ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=4 THEN 'OPEN ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=5 THEN 'CLOSE ONLY'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=6 THEN 'OPEN-CLOSE'
                                                                                                                                                                                                                                                                                           WHEN rc.control_type=7 THEN 'SETPOINT' ELSE NULL END AS control_type, CASE WHEN rd.protocol=8 AND rc.dnp_control_code=129 THEN 'TRIP PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=65 THEN 'CLOSE PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol=8 AND rc.dnp_control_code=1 THEN 'PULSE ON'
                                                                                                                                                                                                                                                                                                                                                                 WHEN rd.protocol !=8 THEN 'N/A' ELSE NULL END AS DNP_control_action
                                            FROM Monarch_TDAN.FEP.vRTU_CONTROL rc, Monarch_TDAN.FEP.vRTU_DATA rd, Monarch_TDAN.FEP.vPROTOCOL_TYPE pt
                                            WHERE rd.record=rc.prtu AND rd.indic=1 AND rd.protocol=pt.record) rc
                                           LEFT JOIN(SELECT 'STATUS' AS point_type, ss.[Key], ss.Name, os.LongDescription AS Description, 'N/A' AS setpoint_curve
                                                     FROM Monarch.SCADA.STATUS ss
                                                          LEFT JOIN Monarch.ONCOR.ONC_STATUS os ON ss.[Key]=os.SCADAKey
                                                     WHERE ss.[Key] IS NOT NULL
                                                     UNION ALL
                                                     SELECT 'SETPOINT' AS point_type, sp.[Key], sp.Name, osp.LongDescription AS Description, ssc.Name setpoint_curve
                                                     FROM Monarch.SCADA.SETPOINT sp
                                                          LEFT JOIN Monarch.ONCOR.ONC_SETPOINT osp ON sp.[Key]=osp.SCADAKey, Monarch.SCADA.SCALE ssc
                                                     WHERE sp.[Key] IS NOT NULL AND sp.pScale=ssc.record) sc ON rc.SourceKey=sc.[Key]) rc
                                  WHERE rc.rtu_name=@RTU) rc
                             ORDER BY rc.control_address_from_1, rc.control_type;
                             """;
        return await databaseHelper.QueryAsync<PasControlTableModel>(query, new { RTU = rtuLocation });
    }
}